// Be Naame Khoda
// FileName: Ai.conf

// ============================================================
// File: Ai.conf
// Description: Configuration file for project reminders and tips.
// Author: [Your Name]
// Created: [Creation Date]
// Last Modified: [Last Modified Date]
// Version: 1.1
// ============================================================

// ==================== REMINDERS & TIPS ======================

1. **File Headers**:
   - Always add the following header to every new file you create:
     ```
     // Be Naame Khoda
     // FileName: [FileName].cs
     ```
   - Example:
     ```csharp
     // Be Naame Khoda
     // FileName: Program.cs
     ```

2. **Logging**:
   - Use the `Logger.LogMessage` method for logging important events.
   - Keep logs concise and meaningful. Avoid excessive logging.
   - Log errors with detailed messages and stack traces for debugging.
   - Example:
     ```csharp
     Logger.LogMessage($"Error loading config: {ex.Message}");
     ```

3. **Async/Await**:
   - Prefer asynchronous programming (`async/await`) over blocking calls like `Thread.Sleep`.
   - Use `TaskCompletionSource` for event-driven async operations.
   - Always handle exceptions in async methods using `try-catch`.
   - Example:
     ```csharp
     public async Task DoSomethingAsync()
     {
         try
         {
             await SomeAsyncOperation();
         }
         catch (Exception ex)
         {
             Logger.LogMessage($"Error in DoSomethingAsync: {ex.Message}");
         }
     }
     ```

4. **Error Handling**:
   - Always wrap critical code in `try-catch` blocks.
   - Log exceptions using `Logger.LogMessage`.
   - Use specific exception types (e.g., `FileNotFoundException`) instead of catching generic `Exception`.
   - Example:
     ```csharp
     try
     {
         // Critical code here
     }
     catch (FileNotFoundException ex)
     {
         Logger.LogMessage($"File not found: {ex.FileName}");
     }
     catch (Exception ex)
     {
         Logger.LogMessage($"Unexpected error: {ex.Message}");
     }
     ```

5. **Code Formatting**:
   - Follow consistent indentation (4 spaces per level).
   - Use meaningful variable and method names.
   - Add comments to explain complex logic.
   - Use regions (`#region` and `#endregion`) to organize large code blocks.
   - Example:
     ```csharp
     #region Properties
     public string Name { get; set; }
     public int Age { get; set; }
     #endregion
     ```

6. **Testing**:
   - Test edge cases (e.g., empty folders, invalid files, etc.).
   - Verify that all events (e.g., `PlaylistFinished`) are handled correctly.
   - Use unit tests for critical functionality.
   - Example:
     ```csharp
     [Test]
     public void TestPlaylistFinishedEvent()
     {
         var player = new AudioPlayer();
         bool eventFired = false;
         player.PlaylistFinished += () => eventFired = true;

         player.Play(new List<FilePathItem> { new FilePathItem { Path = "test.mp3" } });
         Assert.IsTrue(eventFired);
     }
     ```

7. **Configuration**:
   - Store configuration settings in `AppSettings.conf` or similar files.
   - Use `ConfigManager` to load and save configurations.
   - Validate configuration values before using them.
   - Example:
     ```csharp
     var settings = AppConfigManager.LoadConfig();
     if (settings == null)
     {
         throw new InvalidOperationException("Failed to load configuration.");
     }
     ```

8. **Folder Structure**:
   - Keep the project organized with clear folder structures:
     - `/AudioFiles`: For audio files.
     - `/Logs`: For log files.
     - `/Config`: For configuration files.
     - `/Tests`: For unit tests.
   - Example:
     ```
     /ProjectRoot
         /AudioFiles
         /Logs
         /Config
         /Tests
     ```

9. **Version Control**:
   - Use Git for version control.
   - Commit frequently with meaningful commit messages.
   - Follow a branching strategy (e.g., Git Flow).
   - Example commit message:
     ```
     feat: Add support for TTS playback
     ```

10. **Documentation**:
    - Add comments to explain the purpose of classes and methods.
    - Update this `Ai.conf` file with new tips as needed.
    - Use XML documentation for public APIs.
    - Example:
      ```csharp
      /// <summary>
      /// Plays the provided list of file paths or TTS text.
      /// </summary>
      /// <param name="filePathItems">The list of file paths or TTS text to play.</param>
      public void Play(List<FilePathItem> filePathItems)
      {
          // Implementation here
      }
      ```

11. **Performance**:
    - Avoid blocking the main thread with long-running operations.
    - Use `Task.Run` for CPU-bound tasks.
    - Optimize file I/O operations by using buffered streams.
    - Example:
      ```csharp
      await Task.Run(() => PerformCpuBoundTask());
      ```

12. **Security**:
    - Validate all user inputs to prevent injection attacks.
    - Use secure methods for file handling (e.g., avoid hardcoding paths).
    - Example:
      ```csharp
      if (!File.Exists(filePath))
      {
          throw new FileNotFoundException("Invalid file path.");
      }
      ```

// ============================================================
// End of File
// ============================================================